@startuml dependency_inversion

hide empty members

class "Module A" as A

class "Module B" as B

A --> B : dependency
A --> B : flow of control

@enduml


@startuml dependency_inversion_flipped

hide empty members

class "Module A" as A
interface "Interface" AS I <<interface>> 
class "Module B" as B

A -right-> I : dependency
A --> I : flow of control

B -down-> I : dependency
I -down-> B : flow of control

@enduml

@startuml modules

hide empty members

class HighLevelModule {
	- _myLowLevelModule : IDependency
	+ MyLowLevelModule : IDependency
	+ DoSomeStuff() : void
}

interface IDependency <<interface>> {
	{abstract} + LowLevelStuff() : void
}

class LowLevelModule {
	+ LowLevelStuff() : void
}

class AnotherLowLevelModule {
	+ LowLevelStuff() : void
}

class LowLevelModuleFactory {
	{static} + CreateModule() : IDependency
}

HighLevelModule -right- IDependency : <<uses>>
LowLevelModuleFactory -down- IDependency : <<creates>>
IDependency <|.. LowLevelModule
IDependency <|.. AnotherLowLevelModule

@enduml

@startuml ioc_container_flow

(*) --> if "Registered object\nexists?" then
	-right->[true] "Return registered object"
else
	--> "Get registered mapping"
endif

--> if "No class mapping\nregistered?" then
	-right-> [true] "Return null"
else
	--> "Get type descriptor"
endif

--> if "Class creation is possible?" then
	-right-> [false] "Return null"
else
	--> "Get constructor parameters"
endif

--> if "Constructor has parameters?" then
	partition "For each parameter" {
		--> "Get parameter type"
		--> "Create data"
	}
endif

--> "Call object\nconstructor"

@enduml